

name: Download Release ZIP and Fetch Release Notes

on:
  workflow_dispatch:
  push:

jobs:
  download-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch the latest release
        id: fetch_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          LATEST_RELEASE_URL=$(echo $response | jq -r '.zipball_url')
          RELEASE_NOTES=$(echo $response | jq -r '.body')
          echo "LATEST_RELEASE_URL=$LATEST_RELEASE_URL" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "$LATEST_RELEASE_URL"
          echo "$RELEASE_NOTES" 

      - name: Download and process the latest release
        run: |
          # Download the zip file
          curl -L ${{ steps.fetch_release.outputs.LATEST_RELEASE_URL }} -o source.zip

          # Unzip the downloaded file
          unzip source.zip

          # Get the name of the extracted directory
          EXTRACTED_DIR=$(unzip -l source.zip | awk '/^-/ {print $4}' | grep -oE '^[^/]+' | head -n 1)

          # Create a new zip file with exclusions
          zip -r processed_release.zip "$EXTRACTED_DIR" -x ".git" "*.DS_Store"

          # Clean up
          rm -rf source.zip "$EXTRACTED_DIR"

      - name: List files for verification
        run: |
          ls -la

      - name: Print release notes
        run: |
          echo "Release Notes:"
          echo "${{ steps.fetch_release.outputs.RELEASE_NOTES }}"

      - name: Upload processed release as artifact
        uses: actions/upload-artifact@v2
        with:
          name: processed-release
          path: processed_release.zip

