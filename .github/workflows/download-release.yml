
name: Download Release and Create Archive

on:
  workflow_dispatch:
  push:

jobs:
  download-and-archive:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch the latest release
        id: fetch_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          LATEST_RELEASE_URL=$(echo $response | jq -r '.zipball_url')
          RELEASE_NOTES=$(echo $response | jq -r '.body')
          echo "LATEST_RELEASE_URL=$LATEST_RELEASE_URL" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Latest Release URL: $LATEST_RELEASE_URL"
          echo "Release Notes: $RELEASE_NOTES"

      - name: Download the latest release
        run: |
          curl -L ${{ steps.fetch_release.outputs.LATEST_RELEASE_URL }} -o source.zip
          unzip source.zip
          rm source.zip

      - name: Create Archive
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: 'zip'
          filename: 'processed_release.zip'
          exclusions: '*.git* *.DS_Store'

      - name: List files for verification
        run: |
          ls -la

      - name: Print release notes
        run: |
          echo "Release Notes:"
          echo "${{ steps.fetch_release.outputs.RELEASE_NOTES }}"

      - name: Upload processed release as artifact
        uses: actions/upload-artifact@v2
        with:
          name: processed-release
          path: processed_release.zip
      
      - name: Get session token
        id: get_session_token
        env:
          ADOBE_API_URL: ${{ secrets.ADOBE_API_URL }}
          ADOBE_CLIENT_ID: ${{ secrets.ADOBE_CLIENT_ID }}
          ADOBE_CLIENT_SECRET: ${{ secrets.ADOBE_CLIENT_SECRET }}
        run: |
          response=$(curl -s -X POST \
          -u '${{ secrets.ADOBE_CLIENT_ID }}:${{ secrets.ADOBE_CLIENT_SECRET }}' \
          -H 'Content-Type: application/json' \
          -d '{ "grant_type" : "session" }' \
          https://commercedeveloper-sandbox-api.adobe.com/rest/v1/app/session/token
          
          echo "Session Token Response: $response"
          
          SESSION_TOKEN=$(echo $response | jq -r '.ust')
          echo "SESSION_TOKEN=$SESSION_TOKEN" >> $GITHUB_OUTPUT

      - name: Use session token to interact with Adobe Commerce API
        env:
          SESSION_TOKEN: ${{ steps.get_session_token.outputs.SESSION_TOKEN }}
        run: |
          # Example: Get system information
          curl -s -X GET \
          -H "Authorization: Bearer $SESSION_TOKEN" \
          -H "Content-Type: application/json" \
          "${{ secrets.ADOBE_API_URL }}/rest/v1/system" | jq .

      - name: Upload processed release to Adobe Commerce
        env:
          SESSION_TOKEN: ${{ steps.get_session_token.outputs.SESSION_TOKEN }}
        run: |
          # Example: Upload the processed release to Adobe Commerce
          # Note: You'll need to adjust this based on the actual API endpoint and requirements
          curl -X POST \
          -H "Authorization: Bearer $SESSION_TOKEN" \
          -H "Content-Type: application/zip" \
          --data-binary @processed_release.zip \
          "${{ secrets.ADOBE_API_URL }}/rest/v1/extensions/upload"