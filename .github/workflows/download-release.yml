name: Marketplace Automation

on:
  workflow_dispatch:
  push:

jobs:
  marketplace-automation:
    runs-on: ubuntu-latest
    environment: internal 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch the latest release
        id: fetch_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          LATEST_RELEASE_URL=$(echo $response | jq -r '.zipball_url')
          RELEASE_NOTES=$(echo $response | jq -r '.body')
          echo "LATEST_RELEASE_URL=$LATEST_RELEASE_URL" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Latest Release URL: $LATEST_RELEASE_URL"
          echo "Release Notes: $RELEASE_NOTES"

      - name: Download the latest release
        run: |
          curl -L ${{ steps.fetch_release.outputs.LATEST_RELEASE_URL }} -o source.zip
          unzip source.zip
          rm source.zip

      - name: Create Archive
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: 'zip'
          filename: 'processed_release.zip'
          exclusions: '*.git* *.DS_Store'

      - name: List files for verification
        run: |
          ls -la

      - name: Upload processed release as artifact
        uses: actions/upload-artifact@v4
        with:
          name: processed-release
          path: processed_release.zip
          
      - name: Prepare the request payload
        run: |
          touch file-payload && \
          printf '--UNIQUE_BOUNDARY_TOKEN\n' > file-payload && \
          printf 'Content-Disposition: form-data; name="file[]"; filename="processed-release.zip"\n' >> file-payload && \
          printf 'Content-Type: application/zip\n' >> file-payload && \
          printf '\n' >> file-payload && \
          cat processed-release.zip >> file-payload && \
          printf '\n' >> file-payload && \
          printf '\n' >> file-payload && \
          printf "--UNIQUE_BOUNDARY_TOKEN--" >> file-payload
        
      - name: Get session token
        id: get_session_token
        env:
          ADOBE_API_URL: ${{ secrets.ADOBE_API_URL }}
          ADOBE_CLIENT_ID: ${{ secrets.ADOBE_CLIENT_ID }}
          ADOBE_CLIENT_SECRET: ${{ secrets.ADOBE_CLIENT_SECRET }}
        run: |
          response=$(curl -X POST \
          -u "${ADOBE_CLIENT_ID}:${ADOBE_CLIENT_SECRET}" \
          -H 'Content-Type: application/json' \
          -d '{ "grant_type" : "session" }' \
          ${ADOBE_API_URL}/rest/v1/app/session/token)

          SESSION_TOKEN=$(echo $response | jq -r '.ust')
          echo "SESSION_TOKEN=$SESSION_TOKEN" >> $GITHUB_OUTPUT
          
          echo "Session Token Response: $response"

      - name: Upload zip to adobe and get upload id
        id: upload_and_fetch
        env:
          SESSION_TOKEN: ${{ steps.get_session_token.outputs.SESSION_TOKEN }}
          ADOBE_API_URL: ${{ secrets.ADOBE_API_URL }}
        run: |
          # Upload the file
          upload_response=$(curl -X POST \
            -H "Authorization: Bearer $SESSION_TOKEN" \
             -H 'Content-Type: multipart/form-data; boundary=UNIQUE_BOUNDARY_TOKEN' \
             --data-binary @file-payload \
            "${ADOBE_API_URL}/rest/v1/files/uploads")
      
          # Check if the upload was successful
          if echo "$upload_response" | grep -q 'error'; then
            echo "Upload failed: $upload_response"
            exit 1
          else
            echo "Upload successful: $upload_response"
          fi
      
          # Extract upload ID from response (assuming JSON response)
          upload_id=$(echo $upload_response | jq -r '.file_upload_id')
          
          echo "FILE_UPLOAD_ID=$upload_id" >> $GITHUB_OUTPUT

          echo "Upload ID: $FILE_UPLOAD_ID"
          
          

