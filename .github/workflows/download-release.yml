
name: Download Release and Create Archive

on:
  workflow_dispatch:
  push:

jobs:
  download-and-archive:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch the latest release
        id: fetch_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          LATEST_RELEASE_URL=$(echo $response | jq -r '.zipball_url')
          RELEASE_NOTES=$(echo $response | jq -r '.body')
          echo "LATEST_RELEASE_URL=$LATEST_RELEASE_URL" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Latest Release URL: $LATEST_RELEASE_URL"
          echo "Release Notes: $RELEASE_NOTES"

      - name: Download the latest release
        run: |
          curl -L ${{ steps.fetch_release.outputs.LATEST_RELEASE_URL }} -o source.zip
          unzip source.zip
          rm source.zip

      - name: Create Archive
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: 'zip'
          filename: 'processed_release.zip'
          exclusions: '*.git* *.DS_Store'

      - name: List files for verification
        run: |
          ls -la

      - name: Print release notes
        run: |
          echo "Release Notes:"
          echo "${{ steps.fetch_release.outputs.RELEASE_NOTES }}"

      - name: Upload processed release as artifact
        uses: actions/upload-artifact@v4
        with:
          name: processed-release
          path: processed_release.zip
      
      - name: Get session token
        id: get_session_token
        env:
          ADOBE_API_URL: ${{ secrets.ADOBE_API_URL }}
          ADOBE_CLIENT_ID: ${{ secrets.ADOBE_CLIENT_ID }}
          ADOBE_CLIENT_SECRET: ${{ secrets.ADOBE_CLIENT_SECRET }}
        run: |
          response=$(curl -X POST \
          -u 'VKIMCVQ2ZN:78c24c7ab3ba4283b72859147dbbc73581fdf114' \
          -H 'Content-Type: application/json' \
          -d '{ "grant_type" : "session" }' \
          https://commercedeveloper-sandbox-api.adobe.com/rest/v1/app/session/token)
          
          echo "Session Token Response: $response"
          
          SESSION_TOKEN=$(echo $response | jq -r '.ust')
          echo "SESSION_TOKEN=$SESSION_TOKEN" >> $GITHUB_OUTPUT

      - name: Use session token to interact with Adobe Commerce API
        env:
          SESSION_TOKEN: ${{ steps.get_session_token.outputs.SESSION_TOKEN }}
        run: |
          # Example: Get system information
          response=$(curl -s -X GET \
          -H "Authorization: Bearer $SESSION_TOKEN" \
          -H "Content-Type: application/json" \
          "https://commercedeveloper-sandbox-api.adobe.com/rest/v1/system")
          
          echo "API Response:"
          echo "$response"
          
          # Check if the response is valid JSON
          if echo "$response" | jq empty; then
            echo "Valid JSON response:"
            echo "$response" | jq .
          else
            echo "Invalid JSON response. Raw output:"
            echo "$response"
          fi

      - name: Upload and fetch file ID
        id: upload_and_fetch
        env:
          SESSION_TOKEN: ${{ steps.get_session_token.outputs.SESSION_TOKEN }}
          BASE_URL: "https://commercedeveloper-sandbox-api.adobe.com"
        run: |
          # Upload the file
          upload_response=$(curl -X POST \
          -H "Authorization: Bearer $SESSION_TOKEN" \
          -H "Content-Type: multipart/form-data" \
          -F "file=@processed_release.zip;type=application/zip" \
          "${BASE_URL}/rest/v1/files/uploads")
          
          echo "Upload Response:"
          echo "$upload_response"
          
          # Fetch all files
          files_response=$(curl -s -X GET \
          -H "Authorization: Bearer $SESSION_TOKEN" \
          -H "Content-Type: application/json" \
          "${BASE_URL}/rest/v1/files/uploads")
          
          echo "Files Response:"
          echo "$files_response"
          
          # Check if the response is valid JSON
          if echo "$files_response" | jq empty; then
            echo "Valid JSON response for files list"
            
            # Extract the most recent file_upload_id
            file_upload_id=$(echo "$files_response" | jq -r 'sort_by(.file_upload_id) | reverse | .[0].file_upload_id')
            
            if [ ! -z "$file_upload_id" ]; then
              echo "Most recent File upload ID: $file_upload_id"
              echo "FILE_UPLOAD_ID=$file_upload_id" >> $GITHUB_OUTPUT
            else
              echo "No file upload IDs found in the response."
              exit 1
            fi
          else
            echo "Invalid JSON response for files list. Raw output:"
            echo "$files_response"
            exit 1
          fi
      - name: Check submission status
        id: Check_status
        env:
          SESSION_TOKEN: ${{ steps.get_session_token.outputs.SESSION_TOKEN }}
          BASE_URL: "https://commercedeveloper-sandbox-api.adobe.com"
        run: |
          # First, get all submissions
          submissions_response=$(curl -s -X GET \
          -H "Authorization: Bearer ${SESSION_TOKEN}" \
          -H "Content-Type: application/json" \
          "${BASE_URL}/rest/v1/extensions/submissions")

          echo "Submissions Response:"
          echo "$submissions_response" | jq .

          # Check if there's a submission with the file we just uploaded
          file_upload_id="${{ steps.upload_and_fetch.outputs.FILE_UPLOAD_ID }}"
          submission_id=$(echo "$submissions_response" | jq -r --arg file_id "$file_upload_id" '.[] | select(.files[] | .file_upload_id == $file_id) | .submission_id')

          if [ -n "$submission_id" ]; then
            echo "Submission ID for the uploaded file: $submission_id"
            echo "SUBMISSION_ID=$submission_id" >> $GITHUB_OUTPUT

            # Get details for this specific submission
            submission_details=$(curl -s -X GET \
            -H "Authorization: Bearer $SESSION_TOKEN" \
            -H "Content-Type: application/json" \
            "${BASE_URL}/rest/v1/extensions/submissions/$submission_id")

            echo "Submission Details:"
            echo "$submission_details" | jq .
          else
            echo "No submission found for the uploaded file."
          fi